// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using CSharp.Choices;
using LanguageExt.Common;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;

namespace Question.domain4.PostedQuestionWorkflow
{
    public static partial class BodyQuestion
    {
        public static IPostedQuestion Match(this IPostedQuestion self, System.Func<UnpostedQuestion, IPostedQuestion> whenUnpostedQuestion, System.Func<PostedQuestion, IPostedQuestion> whenPostedQuestion)
        {
            switch ((self))
            {
                case UnpostedQuestion unpostedquestion:
                    return whenUnpostedQuestion(unpostedquestion);
                case PostedQuestion postedquestion:
                    return whenPostedQuestion(postedquestion);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<IPostedQuestion> MatchAsync(this IPostedQuestion self, System.Func<UnpostedQuestion, System.Threading.Tasks.Task<IPostedQuestion>> whenUnpostedQuestion, System.Func<PostedQuestion, System.Threading.Tasks.Task<IPostedQuestion>> whenPostedQuestion)
        {
            switch ((self))
            {
                case UnpostedQuestion unpostedquestion:
                    return await whenUnpostedQuestion(unpostedquestion);
                case PostedQuestion postedquestion:
                    return await whenPostedQuestion(postedquestion);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this IPostedQuestion self, System.Func<UnpostedQuestion, R> whenUnpostedQuestion, System.Func<PostedQuestion, R> whenPostedQuestion)
        {
            switch ((self))
            {
                case UnpostedQuestion unpostedquestion:
                    return whenUnpostedQuestion(unpostedquestion);
                case PostedQuestion postedquestion:
                    return whenPostedQuestion(postedquestion);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this IPostedQuestion self, System.Func<UnpostedQuestion, System.Threading.Tasks.Task<R>> whenUnpostedQuestion, System.Func<PostedQuestion, System.Threading.Tasks.Task<R>> whenPostedQuestion)
        {
            switch ((self))
            {
                case UnpostedQuestion unpostedquestion:
                    return await whenUnpostedQuestion(unpostedquestion);
                case PostedQuestion postedquestion:
                    return await whenPostedQuestion(postedquestion);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}