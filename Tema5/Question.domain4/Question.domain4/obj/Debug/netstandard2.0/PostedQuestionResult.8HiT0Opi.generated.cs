// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using CSharp.Choices;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Question.domain4.PostedQuestionWorkflow
{
    public static partial class PostedQuestionResult
    {
        public static IPostedQuestion Match(this IPostedQuestion self, System.Func<QuestionPosted, IPostedQuestion> whenQuestionPosted, System.Func<QuestionNotPosted, IPostedQuestion> whenQuestionNotPosted, System.Func<InvalidQuestion, IPostedQuestion> whenInvalidQuestion)
        {
            switch ((self))
            {
                case QuestionPosted questionposted:
                    return whenQuestionPosted(questionposted);
                case QuestionNotPosted questionnotposted:
                    return whenQuestionNotPosted(questionnotposted);
                case InvalidQuestion invalidquestion:
                    return whenInvalidQuestion(invalidquestion);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<IPostedQuestion> MatchAsync(this IPostedQuestion self, System.Func<QuestionPosted, System.Threading.Tasks.Task<IPostedQuestion>> whenQuestionPosted, System.Func<QuestionNotPosted, System.Threading.Tasks.Task<IPostedQuestion>> whenQuestionNotPosted, System.Func<InvalidQuestion, System.Threading.Tasks.Task<IPostedQuestion>> whenInvalidQuestion)
        {
            switch ((self))
            {
                case QuestionPosted questionposted:
                    return await whenQuestionPosted(questionposted);
                case QuestionNotPosted questionnotposted:
                    return await whenQuestionNotPosted(questionnotposted);
                case InvalidQuestion invalidquestion:
                    return await whenInvalidQuestion(invalidquestion);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this IPostedQuestion self, System.Func<QuestionPosted, R> whenQuestionPosted, System.Func<QuestionNotPosted, R> whenQuestionNotPosted, System.Func<InvalidQuestion, R> whenInvalidQuestion)
        {
            switch ((self))
            {
                case QuestionPosted questionposted:
                    return whenQuestionPosted(questionposted);
                case QuestionNotPosted questionnotposted:
                    return whenQuestionNotPosted(questionnotposted);
                case InvalidQuestion invalidquestion:
                    return whenInvalidQuestion(invalidquestion);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this IPostedQuestion self, System.Func<QuestionPosted, System.Threading.Tasks.Task<R>> whenQuestionPosted, System.Func<QuestionNotPosted, System.Threading.Tasks.Task<R>> whenQuestionNotPosted, System.Func<InvalidQuestion, System.Threading.Tasks.Task<R>> whenInvalidQuestion)
        {
            switch ((self))
            {
                case QuestionPosted questionposted:
                    return await whenQuestionPosted(questionposted);
                case QuestionNotPosted questionnotposted:
                    return await whenQuestionNotPosted(questionnotposted);
                case InvalidQuestion invalidquestion:
                    return await whenInvalidQuestion(invalidquestion);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}